<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Todoist.Net</name>
    </assembly>
    <members>
        <member name="T:Todoist.Net.Exceptions.TodoistException">
            <summary>
                Represents an errors that occur during requests to Todoist API.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Todoist.Net.Exceptions.TodoistException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Todoist.Net.Exceptions.TodoistException" /> class.
            </summary>
        </member>
        <member name="M:Todoist.Net.Exceptions.TodoistException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Todoist.Net.Exceptions.TodoistException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Todoist.Net.Exceptions.TodoistException.#ctor(System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Todoist.Net.Exceptions.TodoistException" /> class.
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Todoist.Net.Exceptions.TodoistException.#ctor(System.Int64,System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Todoist.Net.Exceptions.TodoistException" /> class.
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
            <param name="rawError">The raw error.</param>
        </member>
        <member name="M:Todoist.Net.Exceptions.TodoistException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Todoist.Net.Exceptions.TodoistException" /> class.
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="P:Todoist.Net.Exceptions.TodoistException.Code">
            <summary>
                Gets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Todoist.Net.Exceptions.TodoistException.RawError">
            <summary>
                Gets the raw error.
            </summary>
            <value>The raw error.</value>
        </member>
        <member name="M:Todoist.Net.Exceptions.TodoistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Todoist.Net.IAdvancedTodoistClient.ExecuteCommandsAsync(Todoist.Net.Models.Command[])">
            <summary>
            Executes the commands asynchronous.
            </summary>
            <param name="commands">The commands.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Value cannot be null - commands.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.IAdvancedTodoistClient.PostAsync``1(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts the request asynchronous.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The result.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.IAdvancedTodoistClient.PostFormAsync``1(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Net.Http.ByteArrayContent})">
            <summary>
            Posts the asynchronous and returns a raw content.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <param name="files">The files.</param>
            <returns>
            The result.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.IAdvancedTodoistClient.PostRawAsync(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts the asynchronous and returns a raw content.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The result.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.IAdvancedTodoistClient.ProcessPostAsync``1(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Processes the request asynchronous.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The result of the operation.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.ITodoistClient">
            <summary>
            A Todoist client.
            </summary>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Activity">
            <summary>
            Gets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Backups">
            <summary>
            Gets the backups.
            </summary>
            <value>The backups.</value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
            <remarks>Filters are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Items">
            <summary>
            Gets the items service.
            </summary>
            <value>
            The items service.
            </value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Labels">
            <summary>
            Gets the labels.
            </summary>
            <value>The labels.</value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Notes">
            <summary>
            Gets the notes service.
            </summary>
            <value>
            The notes service.
            </value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Notifications">
            <summary>
            Gets the notifications service.
            </summary>
            <value>The notifications service.</value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Projects">
            <summary>
            Gets the projects service.
            </summary>
            <value>
            The projects service.
            </value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Reminders">
            <summary>
            Gets the reminders.
            </summary>
            <value>The reminders.</value>
            <remarks>Reminders are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Sharing">
            <summary>
            Gets the sharing.
            </summary>
            <value>
            The sharing.
            </value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Templates">
            <summary>
            Gets the templates.
            </summary>
            <value>The templates.</value>
            <remarks>Templates are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Uploads">
            <summary>
            Gets the uploads service.
            </summary>
            <value>
            The uploads service.
            </value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Users">
            <summary>
            Gets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Emails">
            <summary>
            Gets the email.
            </summary>
            <value>The email.</value>
            <remarks>Filters are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.ITodoistClient.Sections">
            <summary>
            Gets the sections service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="M:Todoist.Net.ITodoistClient.CreateTransaction">
            <summary>
            Creates the transaction.
            </summary>
            <returns>The transaction.</returns>
        </member>
        <member name="M:Todoist.Net.ITodoistClient.GetResourcesAsync(Todoist.Net.Models.ResourceType[])">
            <summary>
            Gets the resources asynchronous. Returns all resources if zero resource type were passed.
            </summary>
            <param name="resourceTypes">The resource types.</param>
            <returns>
            The requested resources.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceTypes"/> is <see langword="null"/></exception>
        </member>
        <member name="T:Todoist.Net.ITodoistRestClient">
            <summary>
            Represents a REST client.
            </summary>
        </member>
        <member name="M:Todoist.Net.ITodoistRestClient.PostAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts the asynchronous.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters" /> is <see langword="null" /></exception>
        </member>
        <member name="M:Todoist.Net.ITodoistRestClient.PostFormAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Net.Http.ByteArrayContent})">
            <summary>
            Posts the form asynchronous.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <param name="files">The files.</param>
            <returns>The response.</returns>
        </member>
        <member name="T:Todoist.Net.ITodoistTokenlessClient">
            <summary>
            A Todoist client without an access token.
            </summary>
        </member>
        <member name="M:Todoist.Net.ITodoistTokenlessClient.LoginAsync(System.String,System.String)">
            <summary>
            Logins user and returns a new instance of Todoist client.
            </summary>
            <param name="email">The email.</param>
            <param name="password">The password.</param>
            <returns>
            A new instance of Todoist client.
            </returns>
            <exception cref="T:System.ArgumentException">
            Value cannot be null or empty. - email
            or
            Value cannot be null or empty. - password
            </exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:Todoist.Net.Exceptions.TodoistException">Unable to get token.</exception>
        </member>
        <member name="M:Todoist.Net.ITodoistTokenlessClient.LoginWithGoogleAsync(System.String,System.String)">
            <summary>
            Logins user and returns a new instance of Todoist client.
            </summary>
            <param name="email">The email.</param>
            <param name="oauthToken">The oauth token.</param>
            <returns>
            A new instance of Todoist client.
            </returns>
            <exception cref="T:System.ArgumentException">
            Value cannot be null or empty. - email
            or
            Value cannot be null or empty. - oauthToken
            </exception>
            <exception cref="T:Todoist.Net.Exceptions.TodoistException">API exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.ITodoistTokenlessClient.RegisterUserAsync(Todoist.Net.Models.UserBase)">
            <summary>
            Registers a new user.
            </summary>
            <param name="user">The user.</param>
            <returns>
            The user info.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="user" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Models.Activity">
            <summary>
            Represents activity.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.Activity.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Activity.Events">
            <summary>
            Gets the events.
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.LogEntry">
            <summary>
            Represents a Todoist log entry.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.EventDate">
            <summary>
            Gets the event date.
            </summary>
            <value>The event date.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.EventType">
            <summary>
            Gets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.ExtraData">
            <summary>
            Gets the extra data.
            </summary>
            <value>The extra data.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.InitiatorId">
            <summary>
            Gets the initiator identifier.
            </summary>
            <value>The initiator identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.ObjectType">
            <summary>
            Gets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.ParentItemId">
            <summary>
            Gets the parent item identifier.
            </summary>
            <value>The parent item identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogEntry.ParentProjectId">
            <summary>
            Gets the parent project identifier.
            </summary>
            <value>The parent project identifier.</value>
        </member>
        <member name="T:Todoist.Net.Models.Backup">
            <summary>
            Represents a Todoist backup.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.Backup.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Todoist.Net.Models.Backup.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:Todoist.Net.Models.BaseEntity">
            <summary>
            Represents a base entity.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.BaseEntity.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.BaseInvitation">
            <summary>
            Represents a base invitation.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.BaseInvitation.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.CompletedItem">
            <summary>
            Represents a completed task.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.CompletedDate">
            <summary>
            Gets the completed date.
            </summary>
            <value>
            The completed date.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.TaskId">
            <summary>
            Gets the task id
            </summary>
            <value>
            The task id
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.Labels">
            <summary>
            Gets the labels.
            </summary>
            <value>
            The labels.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.NoteCount">
            <summary>
            Gets the note count.
            </summary>
            <value>
            The note count.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.Notes">
            <summary>
            Gets the notes.
            </summary>
            <value>
            The notes.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.ProjectId">
            <summary>
            Gets the project identifier.
            </summary>
            <value>
            The project identifier.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItem.UserId">
            <summary>
            Gets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.CompletedItemsInfo">
            <summary>
            Represents information about completed tasks.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItemsInfo.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompletedItemsInfo.Projects">
            <summary>
            Gets the projects.
            </summary>
            <value>
            The projects.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.CompleteItemArgument">
            <summary>
            Represents a complete item argument.
            </summary>
            <seealso cref="T:Todoist.Net.Models.ICommandArgument" />
        </member>
        <member name="M:Todoist.Net.Models.CompleteItemArgument.#ctor(Todoist.Net.Models.ComplexId,System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.CompleteItemArgument" /> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="dateCompleted">
            The date completed. If not set, the server will set the value to the current timestamp.
            </param>
            <param name="forceHistory">
            The force history. When enabled the item is moved to history irregardless of whether it’s a
            sub-task or not (by default only root tasks are moved to history).
            </param>
        </member>
        <member name="P:Todoist.Net.Models.CompleteItemArgument.DateCompleted">
            <summary>
            Gets the date completed.
            </summary>
            <value>
            The date completed.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompleteItemArgument.ForceHistory">
            <summary>
            Gets the force history.
            </summary>
            <value>
            The force history.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompleteItemArgument.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.CompleteRecurringItemArgument">
            <summary>
            Represents complete item argument.
            </summary>
            <seealso cref="T:Todoist.Net.Models.ICommandArgument" />
        </member>
        <member name="M:Todoist.Net.Models.CompleteRecurringItemArgument.#ctor(Todoist.Net.Models.ComplexId,Todoist.Net.Models.DueDate)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.CompleteRecurringItemArgument" /> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="dueDate">The due date.</param>
        </member>
        <member name="P:Todoist.Net.Models.CompleteRecurringItemArgument.DueDate">
            <summary>
            Gets the due date.
            </summary>
            <value>
            The due date.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.CompleteRecurringItemArgument.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.ComplexId">
            <summary>
            Struct that represents an identifier of Todoist entities. Can be <see cref="T:System.Int32"/> if it's persistent or <see cref="T:System.Guid"/> if it's temporary.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.ComplexId"/> struct.
            </summary>
            <param name="persistentId">The persistent identifier.</param>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.ComplexId"/> struct.
            </summary>
            <param name="tempId">The temporary identifier.</param>
        </member>
        <member name="P:Todoist.Net.Models.ComplexId.PersistentId">
            <summary>
            Gets the persistent identifier.
            </summary>
            <value>The persistent identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.ComplexId.TempId">
            <summary>
            Gets the temporary identifier.
            </summary>
            <value>The temporary identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.ComplexId.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.op_Equality(Todoist.Net.Models.ComplexId,Todoist.Net.Models.ComplexId)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.op_Inequality(Todoist.Net.Models.ComplexId,Todoist.Net.Models.ComplexId)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.op_Implicit(System.Int64)~Todoist.Net.Models.ComplexId">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Todoist.Net.Models.ComplexId"/>.
            </summary>
            <param name="i">The i.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.op_Implicit(System.Guid)~Todoist.Net.Models.ComplexId">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Todoist.Net.Models.ComplexId"/>.
            </summary>
            <param name="g">The g.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.Equals(Todoist.Net.Models.ComplexId)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Todoist.Net.Models.ComplexId.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Todoist.Net.Models.DateFormat">
            <summary>
            Represents date formats.
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DateFormat.DdMmYyyy">
            <summary>
            DD-MM-YYYY date format.
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DateFormat.MmDdYyyy">
            <summary>
            MM-DD-YYYY date format.
            </summary>
        </member>
        <member name="T:Todoist.Net.Models.DayOfWeek">
            <summary>
            Represents the days of the week.
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DayOfWeek.Monday">
            <summary>
            The monday
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DayOfWeek.Tuesday">
            <summary>
            The tuesday
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DayOfWeek.Wednesday">
            <summary>
            The wednesday
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DayOfWeek.Thursday">
            <summary>
            The thursday
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DayOfWeek.Friday">
            <summary>
            The friday
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DayOfWeek.Saturday">
            <summary>
            The saturday
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.DayOfWeek.Sunday">
            <summary>
            The sunday
            </summary>
        </member>
        <member name="T:Todoist.Net.Models.DueDate">
            <summary>
            Represents due dates for tasks and reminders.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.DueDate.#ctor(System.DateTime,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.DueDate" /> class.
            </summary>
            <param name="date">The date time.</param>
            <param name="isFullDay">if set to <c>true</c> then it's a full day event.</param>
            <param name="timezone">The timezone.</param>
        </member>
        <member name="M:Todoist.Net.Models.DueDate.#ctor(System.String,System.String,Todoist.Net.Models.Language)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.DueDate" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="timezone">The timezone.</param>
            <param name="language">The language.</param>
        </member>
        <member name="P:Todoist.Net.Models.DueDate.Date">
            <summary>
            Gets the date time.
            </summary>
            <value>
            The date time.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.DueDate.IsFullDay">
            <summary>
            Gets a value indicating whether this instance is full day.
            </summary>
            <value>
            <c>true</c> if this instance is full day; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.DueDate.IsRecurring">
            <summary>
            Gets a value indicating whether this instance is recurring.
            </summary>
            <value>
            <c>true</c> if this instance is recurring; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.DueDate.Language">
            <summary>
            Gets the language.
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.DueDate.Text">
            <summary>
            Gets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.DueDate.Timezone">
            <summary>
            Gets the timezone.
            </summary>
            <value>
            The timezone.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.DueDate.StringDate">
            <summary>
            Gets or sets the string date.
            </summary>
            <value>
            The string date.
            </value>
            <remarks>
            Format date according this rules https://developer.todoist.com/sync/v8/?shell#due-dates
            </remarks>
        </member>
        <member name="T:Todoist.Net.Models.EmailInfo">
            <summary>
            Represents an information about a Todoist email.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.EmailInfo.Email">
            <summary>
            Gets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.FileAttachment">
            <summary>
            Represents an attachment.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.FileAttachment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.FileAttachment"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Todoist.Net.Models.FileAttachment.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.FileAttachment"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileUrl">The file URL.</param>
        </member>
        <member name="P:Todoist.Net.Models.FileAttachment.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
            <value>
            The size of the file.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.FileAttachment.FileType">
            <summary>
            Gets the type of the file.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.FileAttachment.UploadState">
            <summary>
            Gets the state of the upload.
            </summary>
            <value>
            The state of the upload.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.FileBase">
            <summary>
            Represents a base file.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.FileBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.FileBase"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Todoist.Net.Models.FileBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.FileBase"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileUrl">The file URL.</param>
        </member>
        <member name="P:Todoist.Net.Models.FileBase.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.FileBase.FileUrl">
            <summary>
            Gets or sets the file URL.
            </summary>
            <value>
            The file URL.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.Filter">
            <summary>
            The filter.
            </summary>
            <remarks>Filters are only available for Todoist Premium users.</remarks>
            <seealso cref="T:Todoist.Net.Models.BaseEntity" />
        </member>
        <member name="M:Todoist.Net.Models.Filter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Filter" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="query">The query.</param>
            <exception cref="T:System.ArgumentException">
            Value cannot be null or empty. - name
            or
            Value cannot be null or empty. - query
            </exception>
        </member>
        <member name="P:Todoist.Net.Models.Filter.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Filter.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value>
            <c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Filter.ItemOrder">
            <summary>
            Gets or sets the item order.
            </summary>
            <value>
            The item order.
            </value>
            <remarks>Filter’s order in the filter list (where the smallest value should place the filter at the top).</remarks>
        </member>
        <member name="P:Todoist.Net.Models.Filter.Name">
            <summary>
            Gets or sets the name of the filter.
            </summary>
            <value>
            The name of the filter.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Filter.Query">
            <summary>
            Gets or sets the query to search for.
            </summary>
            <value>
            The query to search for.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.FilterInfo">
            <summary>
            Represents an information about a Todoist filter.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.FilterInfo.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="M:Todoist.Net.Models.IdsArgument.#ctor(System.Collections.Generic.IEnumerable{Todoist.Net.Models.ComplexId})">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.IdsArgument"/> class.
            </summary>
            <param name="tempIds">The temporary ids.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempIds"/> is <see langword="null"/></exception>
        </member>
        <member name="T:Todoist.Net.Models.Item">
            <summary>
            Represents a Todoist task.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.Item.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Item" /> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Todoist.Net.Models.Item.#ctor(System.String,Todoist.Net.Models.ComplexId)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Item" /> class.
            </summary>
            <param name="content">The content.</param>
            <param name="projectId">The project identifier.</param>
        </member>
        <member name="P:Todoist.Net.Models.Item.AssignedByUid">
            <summary>
            Gets or sets the assigned by uid.
            </summary>
            <value>The assigned by uid.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.ChildOrder">
            <summary>
            Gets or sets order of project. Defines the position of the project among all the projects with the same parent_id.
            </summary>
            <value>The project order.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.Collapsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Todoist.Net.Models.Item" /> is collapsed.
            </summary>
            <value><c>null</c> if [collapsed] contains no value, <c>true</c> if [collapsed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.DateAdded">
            <summary>
            Gets the date added.
            </summary>
            <value>The date added.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.DayOrder">
            <summary>
            Gets or sets the day order.
            </summary>
            <value>The day order.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.DueDate">
            <summary>
            Gets or sets the due date.
            </summary>
            <value>
            The due date.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Item.InHistory">
            <summary>
            Gets a value indicating whether [in history].
            </summary>
            <value><c>null</c> if [in history] contains no value, <c>true</c> if [in history]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.IsArchived">
            <summary>
            Gets a value indicating whether this instance is archived.
            </summary>
            <value><c>null</c> if [is archived] contains no value, <c>true</c> if [is archived]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.IsChecked">
            <summary>
            Gets a value indicating whether this instance is checked.
            </summary>
            <value><c>null</c> if [is checked] contains no value, <c>true</c> if [is checked]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value><c>null</c> if [is deleted] contains no value, <c>true</c> if [is deleted]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.Labels">
            <summary>
            Gets the labels.
            </summary>
            <value>The labels.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.ParentId">
            <summary>
            Gets or sets the id of the parent task. Set to <see langword="null" /> for root tasks.
            </summary>
            <value>
            The parent identifier.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Item.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.ProjectId">
            <summary>
            Gets or sets the project identifier.
            </summary>
            <value>The project identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.ResponsibleUid">
            <summary>
            Gets or sets the responsible uid.
            </summary>
            <value>The responsible uid.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.Section">
            <summary>
            Gets or sets section of project. Defines the section that the task belongs to.
            </summary>
            <value>The project order.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.SyncId">
            <summary>
            Gets the synchronize identifier.
            </summary>
            <value>The synchronize identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Item.UserId">
            <summary>
            Gets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="M:Todoist.Net.Models.Item.Todoist#Net#Models#IWithRelationsArgument#UpdateRelatedTempIds(System.Collections.Generic.IDictionary{System.Guid,System.Int64})">
            <summary>
            Updates the related temporary ids.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="T:Todoist.Net.Models.ItemFilter">
            <summary>
            Represents a completed items query filter.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.ItemFilter.AnnotateNotes">
            <summary>
            Gets or sets a value indicating whether [annotate notes].
            </summary>
            <value><c>null</c> if [annotate notes] contains no value, <c>true</c> if [annotate notes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.ItemFilter.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
            <remarks>Default is 30, and the maximum is 50.</remarks>
        </member>
        <member name="P:Todoist.Net.Models.ItemFilter.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Todoist.Net.Models.ItemFilter.ProjectId">
            <summary>
            Gets or sets the project identifier.
            </summary>
            <value>The project identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.ItemFilter.Since">
            <summary>
            Gets or sets the since.
            </summary>
            <value>The since.</value>
        </member>
        <member name="P:Todoist.Net.Models.ItemFilter.Until">
            <summary>
            Gets or sets the until.
            </summary>
            <value>The until.</value>
        </member>
        <member name="T:Todoist.Net.Models.ItemInfo">
            <summary>
            Represents an information about a Todoist task.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.ItemInfo.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Todoist.Net.Models.ItemInfo.Notes">
            <summary>
            Gets the notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:Todoist.Net.Models.ItemInfo.Project">
            <summary>
            Gets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Todoist.Net.Models.ItemMoveArgument">
            <summary>
            Represents a item move argument.
            </summary>
            <seealso cref="T:Todoist.Net.Models.MoveArgument" />
        </member>
        <member name="P:Todoist.Net.Models.ItemMoveArgument.ProjectId">
            <summary>
            Gets the project identifier.
            </summary>
            <value>
            The project identifier.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.ItemMoveArgument.SectionId">
            <summary>
            Gets the section identifier.
            </summary>
            <value>
            The section identifier.
            </value>
        </member>
        <member name="M:Todoist.Net.Models.ItemMoveArgument.CreateMoveToParent(Todoist.Net.Models.ComplexId,Todoist.Net.Models.ComplexId)">
            <summary>
            Creates the move to project argument.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="parentItemId">Id of the destination parent task. The task becomes the last child task of the parent task.</param>
            <returns>
            Instance of <see cref="T:Todoist.Net.Models.ItemMoveArgument" />
            </returns>
        </member>
        <member name="M:Todoist.Net.Models.ItemMoveArgument.CreateMoveToProject(Todoist.Net.Models.ComplexId,Todoist.Net.Models.ComplexId)">
            <summary>
            Creates the move to project argument.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="projectId">Id of the destination project. The task becomes the last root task of the project.</param>
            <returns>Instance of <see cref="T:Todoist.Net.Models.ItemMoveArgument" /></returns>
        </member>
        <member name="M:Todoist.Net.Models.ItemMoveArgument.CreateMoveToSection(Todoist.Net.Models.ComplexId,Todoist.Net.Models.ComplexId)">
            <summary>
            Creates the move to project argument.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="sectionId">Id of the destination section. The task becomes the last root task of the section.</param>
            <returns>Instance of <see cref="T:Todoist.Net.Models.ItemMoveArgument" /></returns>
        </member>
        <member name="T:Todoist.Net.Models.KarmaGoals">
            <summary>
            Represents karma settings.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.KarmaGoals.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.KarmaGoals"/> class.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.KarmaGoals.DailyGoal">
            <summary>
            Gets or sets the daily goal.
            </summary>
            <value>The daily goal.</value>
        </member>
        <member name="P:Todoist.Net.Models.KarmaGoals.IgnoreDays">
            <summary>
            Gets the ignore days.
            </summary>
            <value>The ignore days.</value>
        </member>
        <member name="P:Todoist.Net.Models.KarmaGoals.KarmaDisabled">
            <summary>
            Gets or sets a value indicating whether [karma disabled].
            </summary>
            <value><c>true</c> if [karma disabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.KarmaGoals.VacationMode">
            <summary>
            Gets or sets a value indicating whether [vacation mode].
            </summary>
            <value><c>true</c> if [vacation mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.KarmaGoals.WeeklyGoal">
            <summary>
            Gets or sets the weekly goal.
            </summary>
            <value>The weekly goal.</value>
        </member>
        <member name="T:Todoist.Net.Models.Label">
            <summary>
            Represents a Todoist label.
            </summary>
            <seealso cref="T:Todoist.Net.Models.BaseEntity" />
        </member>
        <member name="M:Todoist.Net.Models.Label.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Label"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty - name</exception>
        </member>
        <member name="P:Todoist.Net.Models.Label.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Todoist.Net.Models.Label.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value><c>true</c> if this instance is deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Label.ItemOrder">
            <summary>
            Gets or sets the item order.
            </summary>
            <value>The item order.</value>
        </member>
        <member name="P:Todoist.Net.Models.Label.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Todoist.Net.Models.LabelInfo">
            <summary>
            Represents an information about a Todoist label.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.LabelInfo.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Todoist.Net.Models.Language">
            <summary>
            Represents a language type.
            </summary>
            <seealso cref="T:Todoist.Net.Models.StringEnum" />
        </member>
        <member name="M:Todoist.Net.Models.Language.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Language" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Todoist.Net.Models.Language.Chinese">
            <summary>
            Gets the chinese.
            </summary>
            <value>The chinese.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Danish">
            <summary>
            Gets the danish.
            </summary>
            <value>The danish.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Dutch">
            <summary>
            Gets the dutch.
            </summary>
            <value>The dutch.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.English">
            <summary>
            Gets the english.
            </summary>
            <value>The english.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.French">
            <summary>
            Gets the french.
            </summary>
            <value>The french.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.German">
            <summary>
            Gets the german.
            </summary>
            <value>The german.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Italian">
            <summary>
            Gets the italian.
            </summary>
            <value>The italian.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Japanese">
            <summary>
            Gets the japanese.
            </summary>
            <value>The japanese.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Korean">
            <summary>
            Gets the korean.
            </summary>
            <value>The korean.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Polish">
            <summary>
            Gets the polish.
            </summary>
            <value>The polish.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Portuguese">
            <summary>
            Gets the portuguese.
            </summary>
            <value>The portuguese.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Russian">
            <summary>
            Gets the russian.
            </summary>
            <value>The russian.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Spanish">
            <summary>
            Gets the spanish.
            </summary>
            <value>The spanish.</value>
        </member>
        <member name="P:Todoist.Net.Models.Language.Swedish">
            <summary>
            Gets the swedish.
            </summary>
            <value>The swedish.</value>
        </member>
        <member name="T:Todoist.Net.Models.LocationTrigger">
            <summary>
            Represents a location trigger.
            </summary>
            <seealso cref="T:Todoist.Net.Models.StringEnum" />
        </member>
        <member name="M:Todoist.Net.Models.LocationTrigger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.LocationTrigger" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Todoist.Net.Models.LocationTrigger.OnEnter">
            <summary>
            Gets the on enter.
            </summary>
            <value>The on enter.</value>
            <remarks>For entering the location.</remarks>
        </member>
        <member name="P:Todoist.Net.Models.LocationTrigger.OnLeave">
            <summary>
            Gets the on leave.
            </summary>
            <value>The on leave.</value>
            <remarks>For leaving the location.</remarks>
        </member>
        <member name="T:Todoist.Net.Models.LogExtraData">
            <summary>
            Represents extra data of a Todoist log entry.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.LogExtraData.Client">
            <summary>
            Gets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.LogExtraData.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogExtraData.DueDate">
            <summary>
            Gets the due date.
            </summary>
            <value>The due date.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogExtraData.LastDueDate">
            <summary>
            Gets the last due date.
            </summary>
            <value>The last due date.</value>
        </member>
        <member name="T:Todoist.Net.Models.LogFilter">
            <summary>
            Class LogFilter.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.LogFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.LogFilter"/> class.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.InitiatorId">
            <summary>
            Gets or sets the initiator identifier.
            </summary>
            <value>The initiator identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
            <remarks>Default is 30, and the maximum is 100.</remarks>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.ObjectEventTypes">
            <summary>
            Gets the object event types.
            </summary>
            <value>The object event types.</value>
            <remarks>An alternative way to filter by multiple object and event types.
            When this parameter is specified the <see cref="P:Todoist.Net.Models.LogFilter.ObjectId"/>, <see cref="P:Todoist.Net.Models.LogFilter.EventType"/> and <see cref="P:Todoist.Net.Models.LogFilter.ObjectId"/> parameters are ignored.</remarks>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.ObjectId">
            <summary>
            Gets or sets the object identifier.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.ParentItemId">
            <summary>
            Gets or sets the parent item identifier.
            </summary>
            <value>The parent item identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.ParentProjectId">
            <summary>
            Gets or sets the parent project identifier.
            </summary>
            <value>The parent project identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.LogFilter.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            The page.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.MoveArgument">
            <summary>
            Represents a move argument.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.MoveArgument.#ctor(Todoist.Net.Models.ComplexId,System.Nullable{Todoist.Net.Models.ComplexId})">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.MoveArgument" /> class.
            </summary>
            <param name="id">The identifier of moved entity.</param>
            <param name="parentId">The parent entity identifier.</param>
            <exception cref="T:System.ArgumentException">Entity ID is required for the operation</exception>
        </member>
        <member name="P:Todoist.Net.Models.MoveArgument.ParentId">
            <summary>Gets the parent entity identifier.</summary>
            <value>The parent entity identifier.</value>
        </member>
        <member name="T:Todoist.Net.Models.Note">
            <summary>
            Represents a Todoist note.
            </summary>
            <seealso cref="T:Todoist.Net.Models.BaseEntity" />
        </member>
        <member name="M:Todoist.Net.Models.Note.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Note" /> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Todoist.Net.Models.Note.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.FileAttachment">
            <summary>
            Gets or sets the file attachment.
            </summary>
            <value>The file attachment.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.IsArchived">
            <summary>
            Gets the is archived.
            </summary>
            <value>The is archived.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.IsDeleted">
            <summary>
            Gets the is deleted.
            </summary>
            <value>The is deleted.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.ItemId">
            <summary>
            Gets or sets the item identifier.
            </summary>
            <value>The item identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.Posted">
            <summary>
            Gets the posted.
            </summary>
            <value>The posted.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.PostedUserId">
            <summary>
            Gets the posted user identifier.
            </summary>
            <value>The posted user identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.ProjectId">
            <summary>
            Gets the project identifier.
            </summary>
            <value>The project identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Note.UserIdsToNotify">
            <summary>
            Gets the user ids to notify.
            </summary>
            <value>The user ids to notify.</value>
        </member>
        <member name="M:Todoist.Net.Models.Note.Todoist#Net#Models#IWithRelationsArgument#UpdateRelatedTempIds(System.Collections.Generic.IDictionary{System.Guid,System.Int64})">
            <summary>
            Updates the related temporary ids.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="T:Todoist.Net.Models.NoteInfo">
            <summary>
            Represents an information about a Todoist note.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.NoteInfo.Note">
            <summary>
            Gets the note.
            </summary>
            <value>The note.</value>
        </member>
        <member name="T:Todoist.Net.Models.Notification">
            <summary>
            Represents a Todoist live notification.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.Notification.Created">
            <summary>
            Gets the created.
            </summary>
            <value>The created.</value>
        </member>
        <member name="P:Todoist.Net.Models.Notification.FromUid">
            <summary>
            Gets from uid.
            </summary>
            <value>From uid.</value>
        </member>
        <member name="P:Todoist.Net.Models.Notification.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Notification.NotificationKey">
            <summary>
            Gets the notification key.
            </summary>
            <value>The notification key.</value>
        </member>
        <member name="P:Todoist.Net.Models.Notification.NotificationType">
            <summary>
            Gets the type of the notification.
            </summary>
            <value>The type of the notification.</value>
        </member>
        <member name="P:Todoist.Net.Models.Notification.SeqNo">
            <summary>
            Gets the seq no.
            </summary>
            <value>The seq no.</value>
        </member>
        <member name="M:Todoist.Net.Models.Notification.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Todoist.Net.Models.Notification.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:Todoist.Net.Models.NotificationService">
            <summary>
            Represents a reminder type.
            </summary>
            <seealso cref="T:Todoist.Net.Models.StringEnum" />
        </member>
        <member name="M:Todoist.Net.Models.NotificationService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.NotificationService" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Todoist.Net.Models.NotificationService.Email">
            <summary>
            Gets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationService.Push">
            <summary>
            Gets the push.
            </summary>
            <value>The push.</value>
        </member>
        <member name="T:Todoist.Net.Models.NotificationSetting">
            <summary>
            Represents a notification setting.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSetting.NotifyEmail">
            <summary>
            Gets a value indicating whether [notify email].
            </summary>
            <value><c>true</c> if [notify email]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSetting.NotifyPush">
            <summary>
            Gets a value indicating whether [notify push].
            </summary>
            <value><c>true</c> if [notify push]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Todoist.Net.Models.NotificationSettings">
            <summary>
            Represents notification settings.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.BizAccountDisabled">
            <summary>
            Gets the biz account disabled.
            </summary>
            <value>The biz account disabled.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.BizInvitationAccepted">
            <summary>
            Gets the biz invitation accepted.
            </summary>
            <value>The biz invitation accepted.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.BizInvitationRejected">
            <summary>
            Gets the biz invitation rejected.
            </summary>
            <value>The biz invitation rejected.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.BizPaymentFailed">
            <summary>
            Gets the biz payment failed.
            </summary>
            <value>The biz payment failed.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.BizTrialEnterCc">
            <summary>
            Gets the biz trial enter cc.
            </summary>
            <value>The biz trial enter cc.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.BizTrialWillEnd">
            <summary>
            Gets the biz trial will end.
            </summary>
            <value>The biz trial will end.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.ItemAssigned">
            <summary>
            Gets the item assigned.
            </summary>
            <value>The item assigned.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.ItemCompleted">
            <summary>
            Gets the item completed.
            </summary>
            <value>The item completed.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.ItemUncompleted">
            <summary>
            Gets the item uncompleted.
            </summary>
            <value>The item uncompleted.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.NoteAdded">
            <summary>
            Gets the note added.
            </summary>
            <value>The note added.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.ShareInvitationAccepted">
            <summary>
            Gets the share invitation accepted.
            </summary>
            <value>The share invitation accepted.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.ShareInvitationRejected">
            <summary>
            Gets the share invitation rejected.
            </summary>
            <value>The share invitation rejected.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.UserLeftProject">
            <summary>
            Gets the user left project.
            </summary>
            <value>The user left project.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationSettings.UserRemovedFromProject">
            <summary>
            Gets the user removed from project.
            </summary>
            <value>The user removed from project.</value>
        </member>
        <member name="T:Todoist.Net.Models.NotificationType">
            <summary>
            Contains types of Todoist notifications.
            </summary>
            <seealso cref="T:Todoist.Net.Models.StringEnum" />
        </member>
        <member name="M:Todoist.Net.Models.NotificationType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.NotificationType"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizAccountDisabled">
            <summary>
            Gets the biz account disabled.
            </summary>
            <value>The biz account disabled.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizInvitationAccepted">
            <summary>
            Gets the biz invitation accepted.
            </summary>
            <value>The biz invitation accepted.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizInvitationCreated">
            <summary>
            Gets the biz invitation created.
            </summary>
            <value>The biz invitation created.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizInvitationRejected">
            <summary>
            Gets the biz invitation rejected.
            </summary>
            <value>The biz invitation rejected.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizPaymentFailed">
            <summary>
            Gets the biz payment failed.
            </summary>
            <value>The biz payment failed.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizPolicyDisallowedInvitation">
            <summary>
            Gets the biz policy disallowed invitation.
            </summary>
            <value>The biz policy disallowed invitation.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizPolicyRejectedInvitation">
            <summary>
            Gets the biz policy rejected invitation.
            </summary>
            <value>The biz policy rejected invitation.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.BizTrialWillEnd">
            <summary>
            Gets the biz trial will end.
            </summary>
            <value>The biz trial will end.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.ItemAssigned">
            <summary>
            Gets the item assigned.
            </summary>
            <value>The item assigned.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.ItemCompleted">
            <summary>
            Gets the item completed.
            </summary>
            <value>The item completed.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.ItemUncompleted">
            <summary>
            Gets the item uncompleted.
            </summary>
            <value>The item uncompleted.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.NoteAdded">
            <summary>
            Gets the note added.
            </summary>
            <value>The note added.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.ShareInvitationAccepted">
            <summary>
            Gets the share invitation accepted.
            </summary>
            <value>The share invitation accepted.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.ShareInvitationRejected">
            <summary>
            Gets the share invitation rejected.
            </summary>
            <value>The share invitation rejected.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.ShareInvitationSent">
            <summary>
            Gets the share invitation sent.
            </summary>
            <value>The share invitation sent.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.UserLeftProject">
            <summary>
            Gets the user left project.
            </summary>
            <value>The user left project.</value>
        </member>
        <member name="P:Todoist.Net.Models.NotificationType.UserRemovedFromProject">
            <summary>
            Gets the user removed from project.
            </summary>
            <value>The user removed from project.</value>
        </member>
        <member name="T:Todoist.Net.Models.ObjectEventTypes">
            <summary>
            Class ObjectEventTypes.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.ObjectEventTypes.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Todoist.Net.Models.ObjectEventTypes.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="M:Todoist.Net.Models.ObjectEventTypes.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Todoist.Net.Models.ObjectType">
            <summary>
            Represents a Todoist object type.
            </summary>
            <seealso cref="T:Todoist.Net.Models.StringEnum" />
        </member>
        <member name="P:Todoist.Net.Models.ObjectType.Item">
            <summary>
            Gets the item type.
            </summary>
            <value>
            The item type.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.ObjectType.Project">
            <summary>
            Gets the project type.
            </summary>
            <value>
            The project type.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.ObjectType.ProjectComments">
            <summary>
            Gets the project comments type.
            </summary>
            <value>
            The project comments type.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.OrderEntry">
            <summary>
            Represents an order entry which can be used to specify order of a Todoist entity.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.OrderEntry.#ctor(Todoist.Net.Models.ComplexId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.OrderEntry"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="order">The order.</param>
        </member>
        <member name="P:Todoist.Net.Models.OrderEntry.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.OrderEntry.Order">
            <summary>
            Gets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:Todoist.Net.Models.OrderType">
            <summary>
            Represents sorting options.
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.OrderType.OldestFirst">
            <summary>
            The oldest first.
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.OrderType.OldestLast">
            <summary>
            The oldest last.
            </summary>
        </member>
        <member name="T:Todoist.Net.Models.Priority">
            <summary>
            Priority of a task.
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.Priority.Priority1">
            <summary>
            The priority1
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.Priority.Priority2">
            <summary>
            The priority2
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.Priority.Priority3">
            <summary>
            The priority3
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.Priority.Priority4">
            <summary>
            The priority4
            </summary>
        </member>
        <member name="T:Todoist.Net.Models.Project">
            <summary>
            Represents a Todoist project.
            </summary>
            <seealso cref="T:Todoist.Net.Models.BaseEntity" />
        </member>
        <member name="M:Todoist.Net.Models.Project.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Project"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Todoist.Net.Models.Project.Collapsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Todoist.Net.Models.Project"/> is collapsed.
            </summary>
            <value><c>null</c> if [collapsed] contains no value, <c>true</c> if [collapsed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Project.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Todoist.Net.Models.Project.ParentId">
            <summary>
            Gets or sets the indent.
            </summary>
            <value>The indent.</value>
        </member>
        <member name="P:Todoist.Net.Models.Project.IsArchived">
            <summary>
            Gets a value indicating whether this instance is archived.
            </summary>
            <value><c>true</c> if this instance is archived; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Project.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value><c>true</c> if this instance is deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Project.ChildOrder">
            <summary>
            Gets or sets order of project. Defines the position of the project among all the projects with the same parent_id.
            </summary>
            <value>The project order.</value>
        </member>
        <member name="P:Todoist.Net.Models.Project.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Todoist.Net.Models.Project.Shared">
            <summary>
            Gets a value indicating whether this <see cref="T:Todoist.Net.Models.Project"/> is shared.
            </summary>
            <value><c>true</c> if shared; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Todoist.Net.Models.ProjectData">
            <summary>
            Represents a Todoist project and its uncompleted tasks.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.ProjectData.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.ProjectData.Project">
            <summary>
            Gets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Todoist.Net.Models.ProjectInfo">
            <summary>
            Represents an information about a Todoist project.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.ProjectInfo.Notes">
            <summary>
            Gets the notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:Todoist.Net.Models.ProjectInfo.Project">
            <summary>
            Gets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Todoist.Net.Models.QuickAddItem">
            <summary>
            Represents a quick add task.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.QuickAddItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.QuickAddItem"/> class.
            </summary>
            <param name="text">The text of the task that is parsed. It can include a due date in free form text, a project name starting with the # character, a label starting with the @ character, and an assignee starting with the + character.</param>
        </member>
        <member name="P:Todoist.Net.Models.QuickAddItem.Note">
            <summary>
            Gets or sets the content of the note.
            </summary>
            <value>
            The content of the note.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.QuickAddItem.Reminder">
            <summary>
            Gets or sets the reminder. The date of the reminder, added in free form text.
            </summary>
            <value>
            The reminder.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.QuickAddItem.Text">
            <summary>
            Gets the text of the task that is parsed.
            It can include a due date in free form text, a project name starting with the # character, a label starting with the @ character, and an assignee starting with the + character.
            </summary>
            <value>
            The text.
            </value>
            <remarks>Example: Task1 @Label1 #Project1 +ExampleUser</remarks>
        </member>
        <member name="T:Todoist.Net.Models.Reminder">
            <summary>
            Class Reminder.
            </summary>
            <seealso cref="T:Todoist.Net.Models.BaseEntity" />
        </member>
        <member name="M:Todoist.Net.Models.Reminder.#ctor(Todoist.Net.Models.ComplexId)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Reminder" /> class.
            </summary>
            <param name="itemId">An ID of a task.</param>
        </member>
        <member name="M:Todoist.Net.Models.Reminder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Reminder"/> class.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.DueDate">
            <summary>
            Gets or sets the due date.
            </summary>
            <value>
            The due date.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value><c>true</c> if this instance is deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.ItemId">
            <summary>
            Gets or sets the item identifier.
            </summary>
            <value>The item identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.LocationTrigger">
            <summary>
            Gets or sets the location trigger.
            </summary>
            <value>The location trigger.</value>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.MinuteOffset">
            <summary>
            Gets or sets the mm offset.
            </summary>
            <value>The mm offset.</value>
            <remarks>The relative time in minutes before the due date of the item, in which the reminder should be triggered.
            Note, that the item should have a due date set in order to add a relative reminder.</remarks>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.NotifyUid">
            <summary>
            Gets or sets the notify uid.
            </summary>
            <value>The notify uid.</value>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.Service">
            <summary>
            Gets or sets the service.
            </summary>
            <value>The service.</value>
        </member>
        <member name="P:Todoist.Net.Models.Reminder.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Todoist.Net.Models.ReminderInfo">
            <summary>
            Represents an information about a Todoist reminder.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.ReminderInfo.Reminder">
            <summary>
            Gets the reminder.
            </summary>
            <value>The reminder.</value>
        </member>
        <member name="T:Todoist.Net.Models.ReminderService">
            <summary>
            Represents a reminder type.
            </summary>
            <seealso cref="T:Todoist.Net.Models.StringEnum" />
        </member>
        <member name="M:Todoist.Net.Models.ReminderService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.ReminderService" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Todoist.Net.Models.ReminderService.Email">
            <summary>
            Gets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Todoist.Net.Models.ReminderService.Mobile">
            <summary>
            Gets the mobile.
            </summary>
            <value>The mobile.</value>
        </member>
        <member name="P:Todoist.Net.Models.ReminderService.Push">
            <summary>
            Gets the push.
            </summary>
            <value>The push.</value>
        </member>
        <member name="T:Todoist.Net.Models.ReminderType">
            <summary>
            Represents a reminder type.
            </summary>
            <seealso cref="T:Todoist.Net.Models.StringEnum" />
        </member>
        <member name="M:Todoist.Net.Models.ReminderType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.ReminderType" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Todoist.Net.Models.ReminderType.Absolute">
            <summary>
            Gets the absolute.
            </summary>
            <value>The absolute.</value>
            <remarks>For a time-based reminder with a specific time and date in the future.</remarks>
        </member>
        <member name="P:Todoist.Net.Models.ReminderType.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
            <remarks>For a location-based reminder.</remarks>
        </member>
        <member name="P:Todoist.Net.Models.ReminderType.Relative">
            <summary>
            Gets the relative.
            </summary>
            <value>The relative.</value>
            <remarks>For a time-based reminder specified in minutes from now.</remarks>
        </member>
        <member name="T:Todoist.Net.Models.ReorderEntry">
            <summary>
            Represents a reorder entry.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.ReorderEntry.#ctor(Todoist.Net.Models.ComplexId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.ReorderEntry" /> class.
            </summary>
            <param name="id">The identifier of moved entity.</param>
            <param name="childOrder">The new order.</param>
            <exception cref="T:System.ArgumentException">Entity ID is required for reorder operation</exception>
        </member>
        <member name="P:Todoist.Net.Models.ReorderEntry.ChildOrder">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.ReorderEntry.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.Resources">
            <summary>
            Represent a collection of Todoist resources.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Labels">
            <summary>
            Gets the labels.
            </summary>
            <value>The labels.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.LastReadNotificationId">
            <summary>
            Gets or sets the last read notification identifier.
            </summary>
            <value>The last read notification identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Notes">
            <summary>
            Gets the notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Notifications">
            <summary>
            Gets the notifications.
            </summary>
            <value>The notifications.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.ProjectNotes">
            <summary>
            Gets the project notes.
            </summary>
            <value>The project notes.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Projects">
            <summary>
            Gets the projects.
            </summary>
            <value>The projects.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Reminders">
            <summary>
            Gets the reminders.
            </summary>
            <value>The reminders.</value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.Sections">
            <summary>
            Gets the sections.
            </summary>
            <value>
            The sections.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Resources.UserInfo">
            <summary>
            Gets the user information.
            </summary>
            <value>The user information.</value>
        </member>
        <member name="T:Todoist.Net.Models.ResourceType">
            <summary>
            Contains Todoist resource types.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.ResourceType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.ResourceType"/> class.
            </summary>
            <param name="value">The resource.</param>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Labels">
            <summary>
            Gets the labels.
            </summary>
            <value>The labels.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Locations">
            <summary>
            Gets the locations.
            </summary>
            <value>The locations.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Notes">
            <summary>
            Gets the notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Notifications">
            <summary>
            Gets the live notifications.
            </summary>
            <value>The live notifications.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Projects">
            <summary>
            Gets the projects.
            </summary>
            <value>The projects.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.Reminders">
            <summary>
            Gets the reminders.
            </summary>
            <value>The reminders.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Todoist.Net.Models.ResourceType.All">
            <summary>
            Gets all.
            </summary>
            <value>All resources.</value>
        </member>
        <member name="T:Todoist.Net.Models.Section">
            <summary>
            Represents a Todoist section.
            </summary>
            <seealso cref="T:Todoist.Net.Models.BaseEntity" />
        </member>
        <member name="M:Todoist.Net.Models.Section.#ctor(System.String,Todoist.Net.Models.ComplexId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Section" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="projectId">The project identifier.</param>
            <param name="sectionOrder">The section order.</param>
        </member>
        <member name="M:Todoist.Net.Models.Section.#ctor(System.String,Todoist.Net.Models.ComplexId)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Section" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="projectId">The project identifier.</param>
        </member>
        <member name="M:Todoist.Net.Models.Section.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.Section"/> class.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.Section.DateAdded">
            <summary>
            Gets the date added.
            </summary>
            <value>
            The date when the section was created.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Section.DateArchived">
            <summary>
            Gets the date archived.
            </summary>
            <value>
            The date when the section was archived (or null if not archived).
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Section.IsArchived">
            <summary>
            Gets a value indicating whether this instance is archived.
            </summary>
            <value><c>true</c> if this instance is archived; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Section.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this instance is collapsed.
            </summary>
            <value>
            <c>true</c> if the section’s tasks are collapsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Section.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value><c>true</c> if this instance is deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.Section.LegacyProjectId">
            <summary>
            Gets the legacy project identifier.
            </summary>
            <value>
            Legacy project id for the project that the section resides in.
            (only shown for objects created before 1 April 2017)
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Section.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name of the section..
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Section.ProjectId">
            <summary>
            Gets or sets the project identifier.
            </summary>
            <value>
            Project that the section resides in.
            </value>
        </member>
        <member name="P:Todoist.Net.Models.Section.SectionOrder">
            <summary>
            Gets or sets the section order.
            </summary>
            <value>
            The order of section. Defines the position of the section among all the sections in the project.
            </value>
        </member>
        <member name="T:Todoist.Net.Models.SectionMoveArgument">
            <summary>
            Represents a section move argument.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.SectionMoveArgument.#ctor(Todoist.Net.Models.ComplexId,System.Nullable{Todoist.Net.Models.ComplexId})">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.SectionMoveArgument" /> class.
            </summary>
            <param name="id">The identifier of moved entity.</param>
            <param name="projectId">Id of the destination project.</param>
            <exception cref="T:System.ArgumentException">Entity ID is required for the operation</exception>
        </member>
        <member name="P:Todoist.Net.Models.SectionMoveArgument.ProjectId">
            <summary>Gets the parent entity identifier.</summary>
            <value>The parent entity identifier.</value>
        </member>
        <member name="T:Todoist.Net.Models.SectionOrderEntry">
            <summary>
            Represents an section order entry which can be used to specify order of a Todoist section.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.SectionOrderEntry.#ctor(Todoist.Net.Models.ComplexId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.SectionOrderEntry" /> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="order">The order.</param>
        </member>
        <member name="P:Todoist.Net.Models.SectionOrderEntry.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.SectionOrderEntry.Order">
            <summary>
            Gets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="M:Todoist.Net.Models.ShareProjectArgument.#ctor(Todoist.Net.Models.ComplexId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.ShareProjectArgument"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="email">The email.</param>
        </member>
        <member name="T:Todoist.Net.Models.StringEnum">
            <summary>
            Represents a base class of string enum type.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.StringEnum" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.op_Equality(Todoist.Net.Models.StringEnum,Todoist.Net.Models.StringEnum)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.op_Inequality(Todoist.Net.Models.StringEnum,Todoist.Net.Models.StringEnum)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.TryParse(System.String,System.Type,Todoist.Net.Models.StringEnum@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the parsing was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.Equals(Todoist.Net.Models.StringEnum)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Todoist.Net.Models.StringEnum.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Todoist.Net.Models.TimeFormat">
            <summary>
            Represents time formats.
            </summary>
        </member>
        <member name="F:Todoist.Net.Models.TimeFormat.Hour24">
            <summary>
            The hour24
            </summary>
            <remarks>24h format such as 13:00.</remarks>
        </member>
        <member name="F:Todoist.Net.Models.TimeFormat.Hour12">
            <summary>
            The hour12
            </summary>
            <remarks>12h format such as 1:00pm.</remarks>
        </member>
        <member name="T:Todoist.Net.Models.TimeZoneInfo">
            <summary>
            Class TimeZoneInfo.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.TimeZoneInfo.GmtString">
            <summary>
            Gets the GMT string.
            </summary>
            <value>The GMT string.</value>
        </member>
        <member name="P:Todoist.Net.Models.TimeZoneInfo.Hours">
            <summary>
            Gets the hours.
            </summary>
            <value>The hours.</value>
        </member>
        <member name="P:Todoist.Net.Models.TimeZoneInfo.IsDst">
            <summary>
            Gets the is DST.
            </summary>
            <value>The is DST.</value>
        </member>
        <member name="P:Todoist.Net.Models.TimeZoneInfo.Minutes">
            <summary>
            Gets the minutes.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:Todoist.Net.Models.TimeZoneInfo.Timezone">
            <summary>
            Gets the timezone.
            </summary>
            <value>The timezone.</value>
        </member>
        <member name="T:Todoist.Net.Models.Upload">
            <summary>
            Represents a Todoist upload.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.Upload.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.FileType">
            <summary>
            Gets the type of the file.
            </summary>
            <value>The type of the file.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.FileUrl">
            <summary>
            Gets the file URL.
            </summary>
            <value>The file URL.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.Ip">
            <summary>
            Gets the ip.
            </summary>
            <value>The ip.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.ItemId">
            <summary>
            Gets the item identifier.
            </summary>
            <value>The item identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.NoteId">
            <summary>
            Gets the note identifier.
            </summary>
            <value>The note identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.ProjectId">
            <summary>
            Gets the project identifier.
            </summary>
            <value>The project identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.Uploaded">
            <summary>
            Gets the uploaded.
            </summary>
            <value>The uploaded.</value>
        </member>
        <member name="P:Todoist.Net.Models.Upload.UserId">
            <summary>
            Gets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="T:Todoist.Net.Models.User">
            <summary>
            Represents a Todoist user.
            </summary>
            <seealso cref="T:Todoist.Net.Models.UserBase" />
        </member>
        <member name="M:Todoist.Net.Models.User.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.User"/> class.
            </summary>
            <param name="email">The email.</param>
            <param name="fullName">The full name.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:Todoist.Net.Models.User.AutoReminder">
            <summary>
            Gets or sets the automatic reminder.
            </summary>
            <value>The automatic reminder.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.DateFormat">
            <summary>
            Gets or sets the date format.
            </summary>
            <value>The date format.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.DefaultReminder">
            <summary>
            Gets or sets the default reminder.
            </summary>
            <value>The default reminder.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.MobileHost">
            <summary>
            Gets or sets the mobile host.
            </summary>
            <value>The mobile host.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.MobileNumber">
            <summary>
            Gets or sets the mobile number.
            </summary>
            <value>The mobile number.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.NextWeek">
            <summary>
            Gets or sets the next week.
            </summary>
            <value>The next week.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.StartDay">
            <summary>
            Gets or sets the start day.
            </summary>
            <value>The start day.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.StartPage">
            <summary>
            Gets or sets the start page.
            </summary>
            <value>The start page.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.Theme">
            <summary>
            Gets or sets the theme.
            </summary>
            <value>The theme.</value>
        </member>
        <member name="P:Todoist.Net.Models.User.TimeFormat">
            <summary>
            Gets or sets the time format.
            </summary>
            <value>The time format.</value>
        </member>
        <member name="T:Todoist.Net.Models.UserBase">
            <summary>
            Represents a base Todoist user.
            </summary>
        </member>
        <member name="M:Todoist.Net.Models.UserBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Models.UserBase"/> class.
            </summary>
            <param name="email">The email.</param>
            <param name="fullName">The full name.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:Todoist.Net.Models.UserBase.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserBase.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserBase.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserBase.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserBase.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="T:Todoist.Net.Models.UserInfo">
            <summary>
            Class UserInfo.
            </summary>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.AvatarBig">
            <summary>
            Gets the avatar big.
            </summary>
            <value>The avatar big.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.AvatarMedium">
            <summary>
            Gets the avatar medium.
            </summary>
            <value>The avatar medium.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.AvatarS640">
            <summary>
            Gets the avatar S640.
            </summary>
            <value>The avatar S640.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.AvatarSmall">
            <summary>
            Gets the avatar small.
            </summary>
            <value>The avatar small.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.BusinessAccountId">
            <summary>
            Gets the business account identifier.
            </summary>
            <value>The business account identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.CompletedCount">
            <summary>
            Gets the completed count.
            </summary>
            <value>The completed count.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.CompletedToday">
            <summary>
            Gets the completed today.
            </summary>
            <value>The completed today.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.ImageId">
            <summary>
            Gets the image identifier.
            </summary>
            <value>The image identifier.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.InboxProject">
            <summary>
            Gets the inbox project.
            </summary>
            <value>The inbox project.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.IsBizAdmin">
            <summary>
            Gets a value indicating whether this instance is biz admin.
            </summary>
            <value><c>true</c> if this instance is biz admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.IsPremium">
            <summary>
            Gets a value indicating whether this instance is premium.
            </summary>
            <value><c>true</c> if this instance is premium; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.JoinDate">
            <summary>
            Gets the join date.
            </summary>
            <value>The join date.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.Karma">
            <summary>
            Gets the karma.
            </summary>
            <value>The karma.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.KarmaTrend">
            <summary>
            Gets the karma trend.
            </summary>
            <value>The karma trend.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.PremiumUntil">
            <summary>
            Gets the premium until.
            </summary>
            <value>The premium until.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.Token">
            <summary>
            Gets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Todoist.Net.Models.UserInfo.TzInfo">
            <summary>
            Gets the tz information.
            </summary>
            <value>The tz information.</value>
        </member>
        <member name="T:Todoist.Net.Services.ActivityService">
            <summary>
            Contains operations for Todoist log management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.ActivityService.GetAsync(Todoist.Net.Models.LogFilter)">
            <summary>
            Gets list of activity logs.
            </summary>
            <param name="filter">The filter.</param>
            <returns>The activity log entries.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>The activity log is only available for Todoist Premium.</remarks>
        </member>
        <member name="T:Todoist.Net.Services.BackupService">
            <summary>
            Contains operations for Todoist backups management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.BackupService.GetAsync">
            <summary>
            Gets list of recent backup archives asynchronous.
            </summary>
            <returns>The backups information.</returns>
            <remarks>Todoist creates a backup archive of users' data on a daily basis. Backup archives can also be accessed from the web app (Todoist Settings -> Backups).</remarks>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.CommandServiceBase.ExecuteCommandAsync(Todoist.Net.Models.Command)">
            <summary>
            Executes the command asynchronous.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.EmailService">
            <summary>
            Contains operations for Todoist email management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.IEmailService" />
        </member>
        <member name="M:Todoist.Net.Services.EmailService.DisableAsync(Todoist.Net.Models.ObjectType,Todoist.Net.Models.ComplexId)">
            <summary>
            Disables an email address for an object.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="objectId">The object identifier.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.EmailService.GetOrCreateAsync(Todoist.Net.Models.ObjectType,Todoist.Net.Models.ComplexId)">
            <summary>
            Creates a new email address for an object, or gets an existing email.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="objectId">The object identifier.</param>
            <returns>
            The email information.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.FiltersCommandService.AddAsync(Todoist.Net.Models.Filter)">
            <summary>
            Adds a filter asynchronous.
            </summary>
            <param name="filter">The filter.</param>
            <returns>
            The filter ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.FiltersCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing filter asynchronous.
            </summary>
            <param name="id">The ID of the filter.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.FiltersCommandService.UpdateAsync(Todoist.Net.Models.Filter)">
            <summary>
            Updates a filter asynchronous.
            </summary>
            <param name="filter">The filter.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.FiltersCommandService.UpdateOrderAsync(Todoist.Net.Models.OrderEntry[])">
            <summary>
            Update the orders of multiple filters at once.
            </summary>
            <param name="orderEntries">The order entries.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderEntries"/> is <see langword="null"/></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.FiltersService">
            <summary>
            Contains operations for filters management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.FiltersService.GetAsync">
            <summary>
            Gets all filters.
            </summary>
            <returns>The filters.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.FiltersService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a filter info by ID.
            </summary>
            <param name="id">The ID of the filter.</param>
            <returns>
            The filter info.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IActivityService">
            <summary>
            Contains operations for Todoist log management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IActivityService.GetAsync(Todoist.Net.Models.LogFilter)">
            <summary>
            Gets list of activity logs.
            </summary>
            <param name="filter">The filter.</param>
            <returns>The activity log entries.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>The activity log is only available for Todoist Premium.</remarks>
        </member>
        <member name="T:Todoist.Net.Services.IBackupService">
            <summary>
            Contains operations for Todoist backups management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IBackupService.GetAsync">
            <summary>
            Gets list of recent backup archives asynchronous.
            </summary>
            <returns>The backups information.</returns>
            <remarks>Todoist creates a backup archive of users' data on a daily basis. Backup archives can also be accessed from the web app (Todoist Settings -> Backups).</remarks>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IEmailService">
            <summary>
            Contains operations for Todoist email management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IEmailService.DisableAsync(Todoist.Net.Models.ObjectType,Todoist.Net.Models.ComplexId)">
            <summary>
            Disables an email address for an object.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="objectId">The object identifier.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IEmailService.GetOrCreateAsync(Todoist.Net.Models.ObjectType,Todoist.Net.Models.ComplexId)">
            <summary>
            Creates a new email address for an object, or gets an existing email.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="objectId">The object identifier.</param>
            <returns>
            The email information.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IFiltersCommandService">
            <summary>
            Contains operations for filters management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IFiltersCommandService.AddAsync(Todoist.Net.Models.Filter)">
            <summary>
            Adds a filter asynchronous.
            </summary>
            <param name="filter">The filter.</param>
            <returns>
            The temporary ID of the filter.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IFiltersCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing filter asynchronous.
            </summary>
            <param name="id">The ID of the filter.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IFiltersCommandService.UpdateAsync(Todoist.Net.Models.Filter)">
            <summary>
            Updates a filter asynchronous.
            </summary>
            <param name="filter">The filter.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IFiltersCommandService.UpdateOrderAsync(Todoist.Net.Models.OrderEntry[])">
            <summary>
            Update the orders of multiple filters at once.
            </summary>
            <param name="orderEntries">The order entries.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderEntries"/> is <see langword="null"/></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IFiltersService">
            <summary>
            Contains operations for filters management.
            </summary>
            <remarks>Filters are only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.IFiltersService.GetAsync">
            <summary>
            Gets all filters.
            </summary>
            <returns>The filters.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IFiltersService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a filter info by ID.
            </summary>
            <param name="id">The ID of the filter.</param>
            <returns>
            The filter info.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IItemsCommandService">
            <summary>
            Contains methods for Todoist tasks management which can be executed in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.AddAsync(Todoist.Net.Models.Item)">
            <summary>
            Adds a new task to a project asynchronous. By default the task is added to the user’s Inbox project.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The temporary ID of the item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Closes a task asynchronous.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>
            A simplified version of item_complete / item_update_date_complete.
            The command does exactly what official clients do when you close a task: regular task is completed and moved to history,
            subtask is checked (marked as done, but not moved to history), recurring task is moved forward (due date is updated).
            </remarks>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.CompleteRecurringAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Completes a recurring task. See also <see cref="M:Todoist.Net.Services.ItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)" /> for a simplified version of the command.
            </summary>
            <param name="id">The recurring task ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.CompleteRecurringAsync(Todoist.Net.Models.CompleteRecurringItemArgument)">
            <summary>
            Completes a recurring task. See also <see cref="M:Todoist.Net.Services.IItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)" /> for a simplified version of the command.
            </summary>
            <param name="completeRecurringItemArgument">The complete recurring item argument.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="completeRecurringItemArgument"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing task asynchronous.
            </summary>
            <param name="id">List of the IDs of the tasks to delete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.UncompleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Uncompletes tasks and moves them to the active projects.
            </summary>
            <param name="id">The ids of the tasks.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.UpdateAsync(Todoist.Net.Models.Item)">
            <summary>
            Updates a task asynchronous.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.UpdateDayOrdersAsync(Todoist.Net.Models.OrderEntry[])">
            <summary>
            Updates the day orders of multiple items at once.
            </summary>
            <param name="idsToOrder">The ids to order.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="idsToOrder"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.MoveAsync(Todoist.Net.Models.ItemMoveArgument)">
            <summary>
            Moves task to a different location asynchronous.
            </summary>
            <param name="moveArgument">The move entry.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="moveArgument" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.ReorderAsync(Todoist.Net.Models.ReorderEntry[])">
            <summary>
            Update the orders and indents of multiple items at once asynchronous.
            </summary>
            <param name="reorderEntries">The reorder entries.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reorderEntries" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be an empty collection.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.CompleteAsync(Todoist.Net.Models.CompleteItemArgument)">
            <summary>
            Completes tasks and optionally move them to history. See also <see cref="M:Todoist.Net.Services.ItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)" /> for a simplified version of the command.
            </summary>
            <param name="completeItemArgument">The complete item argument.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="completeItemArgument"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.ArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Archives a task and all its descendants asynchronous.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>
            It is mostly intended to allow users to force sub-tasks to be moved to the history since root tasks are automatically
            archived upon completion. See also item_close for a simplified version of the command.
            </remarks>
        </member>
        <member name="M:Todoist.Net.Services.IItemsCommandService.UnArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            UnArchives a task and all its descendants asynchronous.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>
            No ancestors will be restored from the history. Instead, the item is unarchived (and uncompleted) alone, loses any
            parent relationship (becomes a project root item), and is placed at the end of the list of other project root items.
            </remarks>
        </member>
        <member name="T:Todoist.Net.Services.IItemsService">
            <summary>
            Contains methods for Todoist tasks management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.ItemsCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.IItemsService.GetAsync">
            <summary>
            Gets all items.
            </summary>
            <returns>The items.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets an item by ID.
            </summary>
            <param name="id">The ID of the item.</param>
            <returns>
            The item.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IItemsService.GetCompletedAsync(Todoist.Net.Models.ItemFilter)">
            <summary>
            Gets all the user’s completed items (tasks).
            </summary>
            <param name="filter">The filter.</param>
            <returns>
            The completed items.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>Only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.IItemsService.QuickAddAsync(Todoist.Net.Models.QuickAddItem)">
            <summary>
            Add a task. Implementation of the Quick Add Task available in the official clients.
            </summary>
            <param name="quickAddItem">The quick add item.</param>
            <returns>The created task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="quickAddItem"/> is <see langword="null"/></exception>
        </member>
        <member name="T:Todoist.Net.Services.ILabelsCommandService">
            <summary>
            Contains operations for labels management which can be executes in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.ILabelsCommandService.AddAsync(Todoist.Net.Models.Label)">
            <summary>
            Adds a label asynchronous.
            </summary>
            <param name="label">The label.</param>
            <returns>
            The temporary ID of the label.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="label" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ILabelsCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing label asynchronous.
            </summary>
            <param name="id">The ID of the label.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ILabelsCommandService.UpdateAsync(Todoist.Net.Models.Label)">
            <summary>
            Updates a label asynchronous.
            </summary>
            <param name="label">The label.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="label"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ILabelsCommandService.UpdateOrderAsync(Todoist.Net.Models.OrderEntry[])">
            <summary>
            Update the orders of multiple labels at once.
            </summary>
            <param name="orderEntries">The order entries.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderEntries"/> is <see langword="null"/></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ILabelsService">
            <summary>
            Contains operations for labels management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.ILabelsCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.ILabelsService.GetAsync">
            <summary>
            Gets all labels.
            </summary>
            <returns>The labels.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ILabelsService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a label by ID.
            </summary>
            <param name="id">The ID of the label.</param>
            <returns>
            The label.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.INotesCommandServices">
            <summary>
            Contains operations for notes management which can be executes in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.INotesCommandServices.AddToItemAsync(Todoist.Net.Models.Note,Todoist.Net.Models.ComplexId)">
            <summary>
            Adds the note asynchronous.
            </summary>
            <param name="note">The note.</param>
            <param name="itemId">The item identifier.</param>
            <returns>
            The temporary ID of the note.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.INotesCommandServices.AddToProjectAsync(Todoist.Net.Models.Note,Todoist.Net.Models.ComplexId)">
            <summary>
            Adds the note asynchronous.
            </summary>
            <param name="note">The note.</param>
            <param name="projectId">The project ID.</param>
            <returns>
            The note ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.INotesCommandServices.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes the note asynchronous.
            </summary>
            <param name="id">The id of the note.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.INotesCommandServices.UpdateAsync(Todoist.Net.Models.Note)">
            <summary>
            Updates the note asynchronous.
            </summary>
            <param name="note">The note.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.INotesServices">
            <summary>
            Contains operations for notes management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.INotesCommandServices" />
        </member>
        <member name="M:Todoist.Net.Services.INotesServices.GetAsync">
            <summary>
            Gets all notes.
            </summary>
            <returns>The notes.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.INotesServices.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a note by ID.
            </summary>
            <param name="id">The ID of the note.</param>
            <returns>
            The note.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.INotificationsCommandService">
            <summary>
            Contains operations for Todoist notification management which can be executes in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.INotificationsCommandService.MarkAllReadAsync">
            <summary>
            Marks the last read live notification.
            </summary>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.INotificationsCommandService.MarkLastReadAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Marks the last read live notification.
            </summary>
            <param name="id">The ID of the last read notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.INotificationsService">
            <summary>
            Contains operations for Todoist notification management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.INotificationsService.GetAsync">
            <summary>
            Gets all live notifications.
            </summary>
            <returns>List of the notifications.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IProjectCommandService">
            <summary>
            Contains methods for projects management which can be executed in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IProjectCommandService.AddAsync(Todoist.Net.Models.Project)">
            <summary>
            Adds a new project.
            </summary>
            <param name="project">The project.</param>
            <returns>The temporary ID of the project.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="project"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.IProjectCommandService.ArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Archive project and its children.
            </summary>
            <param name="id">The ids.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/></exception>
            <remarks>Only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.IProjectCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Delete an existing project and all its descendants.
            </summary>
            <param name="id">The project ID.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.IProjectCommandService.UnarchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Un archive project and its children.
            </summary>
            <param name="id">The ids.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/></exception>
            <remarks>Only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.IProjectCommandService.UpdateAsync(Todoist.Net.Models.Project)">
            <summary>
            Updates an existing project.
            </summary>
            <param name="project">The project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="project"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.IProjectCommandService.MoveAsync(Todoist.Net.Models.MoveArgument)">
            <summary>
            Updates parent project relationships of the project asynchronous.
            </summary>
            <param name="moveArgument">The move entry.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="moveArgument" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IProjectCommandService.ReorderAsync(Todoist.Net.Models.ReorderEntry[])">
            <summary>
            Update the orders and indents of multiple projects at once asynchronous.
            </summary>
            <param name="reorderEntries">The reorder entries.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reorderEntries" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be an empty collection.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IProjectsService">
            <summary>
            Contains methods for projects management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.IProjectCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.IProjectsService.GetArchivedAsync">
            <summary>
            Gets archived projects.
            </summary>
            <returns>
            The archived projects.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IProjectsService.GetAsync">
            <summary>
            Gets all projects.
            </summary>
            <returns>The projects.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IProjectsService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets project by ID.
            </summary>
            <param name="id">The ID of the project.</param>
            <returns>
            The project.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IProjectsService.GetDataAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a project’s uncompleted items.
            </summary>
            <param name="id">The ID of the project.</param>
            <returns>
            The project data.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IRemindersCommandService">
            <summary>
            Contains operations for reminders management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IRemindersCommandService.AddAsync(Todoist.Net.Models.Reminder)">
            <summary>
            Adds a reminder asynchronous.
            </summary>
            <param name="reminder">The reminder.</param>
            <returns>
            The reminder ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reminder" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IRemindersCommandService.ClearLocationsAsync">
            <summary>
            Update the orders of multiple filters at once.
            </summary>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IRemindersCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing reminder asynchronous.
            </summary>
            <param name="id">The ID of the reminder.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IRemindersCommandService.UpdateAsync(Todoist.Net.Models.Reminder)">
            <summary>
            Updates a reminder asynchronous.
            </summary>
            <param name="reminder">The reminder.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reminder"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IRemindersService">
            <summary>
            Contains operations for reminders management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IRemindersService.GetAsync">
            <summary>
            Gets all reminders.
            </summary>
            <returns>The filters.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IRemindersService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a reminder info by ID.
            </summary>
            <param name="id">The ID of the reminder.</param>
            <returns>
            The reminder info.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ISectionsCommandService">
            <summary>
            Contains methods for sections management which can be executed in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.ISectionsCommandService.AddAsync(Todoist.Net.Models.Section)">
            <summary>
            Add a new section to a project.
            </summary>
            <param name="section">The section.</param>
            <returns>The ID of the section.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="section" /> is <see langword="null" /></exception>
        </member>
        <member name="M:Todoist.Net.Services.ISectionsCommandService.ArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Archive a section and all its descendants tasks.
            </summary>
            <param name="id">The section ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISectionsCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Delete a section and all its descendants items.
            </summary>
            <param name="id">The section ID.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISectionsCommandService.MoveAsync(Todoist.Net.Models.SectionMoveArgument)">
            <summary>
            Updates the section.
            </summary>
            <param name="moveArgument">The move argument.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="moveArgument" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISectionsCommandService.ReorderAsync(Todoist.Net.Models.SectionOrderEntry[])">
            <summary>
            Updates the section.
            </summary>
            <param name="orderEntries">The order entries.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderEntries" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISectionsCommandService.UnarchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Unarchive a section.
            </summary>
            <param name="id">The section ID.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISectionsCommandService.UpdateAsync(Todoist.Net.Models.Section)">
            <summary>
            Updates the section.
            </summary>
            <param name="section">The section.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="section" /> is <see langword="null" /></exception>
        </member>
        <member name="T:Todoist.Net.Services.ISectionService">
            <summary>
            Contains methods for sections management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.ISectionsCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.ISectionService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a section by ID.
            </summary>
            <param name="id">The ID of the section.</param>
            <returns>
            The section.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ISharingCommandService">
            <summary>
            Contains methods for projects management which can be executed in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.ISharingCommandService.AcceptInvitationAsync(System.Int64,System.String)">
            <summary>
            Accepts an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <param name="invitationSecret">The secret fetched from the live notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingCommandService.DeleteCollaboratorAsync(Todoist.Net.Models.ComplexId,System.String)">
            <summary>
            Deletes a person from a shared project.
            </summary>
            <param name="id">The project ID to be affected.</param>
            <param name="email">The user email with whom to share the project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingCommandService.DeleteInvitationAsync(System.Int64)">
            <summary>
            Deletes an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingCommandService.RejectInvitationAsync(System.Int64,System.String)">
            <summary>
            Rejects an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <param name="invitationSecret">The secret fetched from the live notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingCommandService.ShareProjectAsync(Todoist.Net.Models.ComplexId,System.String)">
            <summary>
            Shares a project.
            </summary>
            <param name="id">The project ID to be shared.</param>
            <param name="email">The user email with whom to share the project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ISharingService">
            <summary>
            Contains methods for sharing management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.ISharingService.AcceptInvitationAsync(System.Int64,System.String)">
            <summary>
            Accepts an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <param name="invitationSecret">The secret fetched from the live notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingService.DeleteCollaboratorAsync(Todoist.Net.Models.ComplexId,System.String)">
            <summary>
            Deletes a person from a shared project.
            </summary>
            <param name="id">The project ID to be affected.</param>
            <param name="email">The user email with whom to share the project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingService.DeleteInvitationAsync(System.Int64)">
            <summary>
            Deletes an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingService.RejectInvitationAsync(System.Int64,System.String)">
            <summary>
            Rejects an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <param name="invitationSecret">The secret fetched from the live notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ISharingService.ShareProjectAsync(Todoist.Net.Models.ComplexId,System.String)">
            <summary>
            Shares a project.
            </summary>
            <param name="id">The project ID to be shared.</param>
            <param name="email">The user email with whom to share the project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ITemplateService">
            <summary>
            Contains operations for templates management.
            </summary>
            <remarks>Templates are only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.ITemplateService.ExportAsFileAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a template for the project as a file asynchronous.
            </summary>
            <param name="projectId">The project identifier.</param>
            <returns>The CSV template is returned.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ITemplateService.ExportAsShareableUrlAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a template for the project as a shareable URL asynchronous.
            </summary>
            <param name="projectId">The project identifier.</param>
            <returns>The file object of the template.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ITemplateService.ImportIntoProjectAsync(Todoist.Net.Models.ComplexId,System.Byte[])">
            <summary>
            Imports a template into a project asynchronous.
            </summary>
            <param name="projectId">The project identifier.</param>
            <param name="fileContent">Content of the template.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ItemsCommandService">
            <summary>
            Contains methods for Todoist tasks management which can be executed in a transaction.
            </summary>
            <seealso cref="T:Todoist.Net.Services.CommandServiceBase" />
            <seealso cref="T:Todoist.Net.Services.IItemsCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.AddAsync(Todoist.Net.Models.Item)">
            <summary>
            Adds a new task to a project asynchronous.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The item ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>By default the task is added to the user’s Inbox project.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Closes a task asynchronous.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>
            A simplified version of item_complete / item_update_date_complete.
            The command does exactly what official clients do when you close a task: regular task is completed and moved to history,
            subtask is checked (marked as done, but not moved to history), recurring task is moved forward (due date is updated).
            </remarks>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.ArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Archives a task and all its descendants asynchronous.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>
            It is mostly intended to allow users to force sub-tasks to be moved to the history since root tasks are automatically
            archived upon completion. See also item_close for a simplified version of the command.
            </remarks>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.UnArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            UnArchives a task and all its descendants asynchronous.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>
            No ancestors will be restored from the history. Instead, the item is unarchived (and uncompleted) alone, loses any
            parent relationship (becomes a project root item), and is placed at the end of the list of other project root items.
            </remarks>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.CompleteAsync(Todoist.Net.Models.CompleteItemArgument)">
            <summary>
            Completes tasks and optionally move them to history. See also <see cref="M:Todoist.Net.Services.ItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)" /> for a simplified version of the command.
            </summary>
            <param name="completeItemArgument">The complete item argument.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="completeItemArgument"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.CompleteRecurringAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Completes a recurring task. See also <see cref="M:Todoist.Net.Services.ItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)" /> for a simplified version of the command.
            </summary>
            <param name="id">The recurring task ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.CompleteRecurringAsync(Todoist.Net.Models.CompleteRecurringItemArgument)">
            <summary>
            Completes a recurring task. See also <see cref="M:Todoist.Net.Services.ItemsCommandService.CloseAsync(Todoist.Net.Models.ComplexId)" /> for a simplified version of the command.
            </summary>
            <param name="completeRecurringItemArgument">The complete recurring item argument.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="completeRecurringItemArgument"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing task asynchronous.
            </summary>
            <param name="id">Id of the task to delete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.UncompleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Uncompletes an unarchived item and all its ancestors.
            </summary>
            <param name="id">The ids of the tasks.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.UpdateAsync(Todoist.Net.Models.Item)">
            <summary>
            Updates a task asynchronous.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.UpdateDayOrdersAsync(Todoist.Net.Models.OrderEntry[])">
            <summary>
            Updates the day orders of multiple items at once.
            </summary>
            <param name="idsToOrder">The ids to order.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="idsToOrder"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.MoveAsync(Todoist.Net.Models.ItemMoveArgument)">
            <summary>
            Moves task to a different location asynchronous.
            </summary>
            <param name="moveArgument">The move entry.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="moveArgument" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsCommandService.ReorderAsync(Todoist.Net.Models.ReorderEntry[])">
            <summary>
            Update the orders and indents of multiple items at once asynchronous.
            </summary>
            <param name="reorderEntries">The reorder entries.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reorderEntries" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be an empty collection.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ItemsService">
            <summary>
            Contains methods for Todoist tasks management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.ItemsCommandService" />
            <seealso cref="T:Todoist.Net.Services.IItemsService" />
        </member>
        <member name="M:Todoist.Net.Services.ItemsService.#ctor(Todoist.Net.IAdvancedTodoistClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Services.ItemsService"/> class.
            </summary>
            <param name="todoistClient">The todoist client.</param>
        </member>
        <member name="M:Todoist.Net.Services.ItemsService.GetAsync">
            <summary>
            Gets all items.
            </summary>
            <returns>The items.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets an item by ID.
            </summary>
            <param name="id">The ID of the item.</param>
            <returns>The item.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ItemsService.GetCompletedAsync(Todoist.Net.Models.ItemFilter)">
            <summary>
            Gets all the user’s completed items (tasks).
            </summary>
            <param name="filter">The filter.</param>
            <returns>The completed items.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>Only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.ItemsService.QuickAddAsync(Todoist.Net.Models.QuickAddItem)">
            <summary>
            Add a task. Implementation of the Quick Add Task available in the official clients.
            </summary>
            <param name="quickAddItem">The quick add item.</param>
            <returns>The created task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="quickAddItem"/> is <see langword="null"/></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ITransaction">
            <summary>
            Represents a Transaction
            </summary>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Filters">
            <summary>
            Gets or sets the filters.
            </summary>
            <value>The filters.</value>
            <remarks>Filters are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Items">
            <summary>
            Gets the items service.
            </summary>
            <value>The items service.</value>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Labels">
            <summary>
            Gets the labels service.
            </summary>
            <value>The labels service.</value>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Notes">
            <summary>
            Gets the notes service.
            </summary>
            <value>The notes service.</value>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Notifications">
            <summary>
            Gets the notifications service.
            </summary>
            <value>The notifications service.</value>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Project">
            <summary>
            Gets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Reminders">
            <summary>
            Gets the reminders.
            </summary>
            <value>The reminders.</value>
            <remarks>Reminders are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Sharing">
            <summary>
            Gets the sharing.
            </summary>
            <value>
            The sharing.
            </value>
        </member>
        <member name="P:Todoist.Net.Services.ITransaction.Users">
            <summary>
            Gets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="M:Todoist.Net.Services.ITransaction.CommitAsync">
            <summary>
            Commits the transaction asynchronous.
            </summary>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IUploadService">
            <summary>
            Contains operations for file attachments management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IUploadService.DeleteAsync(System.String)">
            <summary>
            Deletes a file asynchronous.
            </summary>
            <param name="fileUrl">The file URL.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IUploadService.GetAsync">
            <summary>
            Gets all uploads.
            </summary>
            <returns>
            The uploads.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IUploadService.UploadAsync(System.String,System.Byte[])">
            <summary>
            Uploads a file asynchronous.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileContent">Content of the file.</param>
            <returns>The uploaded file.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.IUsersCommandService">
            <summary>
            Contains operations for users management which can be executed in a transaction.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IUsersCommandService.UpdateAsync(Todoist.Net.Models.User)">
            <summary>
            Gets the current user info.
            </summary>
            <param name="user">The user.</param>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="user" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IUsersCommandService.UpdateKarmaGoalsAsync(Todoist.Net.Models.KarmaGoals)">
            <summary>
            Gets the current user info.
            </summary>
            <param name="karmaGoals">The karma goals.</param>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="karmaGoals" /> is <see langword="null" /></exception>
        </member>
        <member name="T:Todoist.Net.Services.IUsersService">
            <summary>
            Contains operations for users management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.IUsersService.DeleteAsync(System.String,System.String)">
            <summary>
            Deletes the current user.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="reason">The reason.</param>
            <returns>The label info.</returns>
            <exception cref="T:System.ArgumentNullException">API exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IUsersService.GetCurrentAsync">
            <summary>
            Gets the current user info.
            </summary>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.IUsersService.UpdateNotificationSettingsAsync(Todoist.Net.Models.NotificationType,Todoist.Net.Models.NotificationService,System.Boolean)">
            <summary>
            Gets the current user info.
            </summary>
            <param name="notificationType">Type of the notification.</param>
            <param name="service">The service.</param>
            <param name="notify">The notify.</param>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="notificationType" /> or <paramref name="service" /> is <see langword="null" /></exception>
        </member>
        <member name="T:Todoist.Net.Services.LabelsCommandService">
            <summary>
            Contains operations for labels management which can be executes in a transaction.
            </summary>
            <seealso cref="T:Todoist.Net.Services.CommandServiceBase" />
            <seealso cref="T:Todoist.Net.Services.ILabelsCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.LabelsCommandService.AddAsync(Todoist.Net.Models.Label)">
            <summary>
            Adds a label asynchronous.
            </summary>
            <param name="label">The label.</param>
            <returns>
            The label ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="label" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.LabelsCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing label asynchronous.
            </summary>
            <param name="id">The ID of the label.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.LabelsCommandService.UpdateAsync(Todoist.Net.Models.Label)">
            <summary>
            Updates a label asynchronous.
            </summary>
            <param name="label">The label.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="label"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.LabelsCommandService.UpdateOrderAsync(Todoist.Net.Models.OrderEntry[])">
            <summary>
            Update the orders of multiple labels at once.
            </summary>
            <param name="orderEntries">The order entries.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderEntries"/> is <see langword="null"/></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.LabelsService">
            <summary>
            Contains operations for labels management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.LabelsCommandService" />
            <seealso cref="T:Todoist.Net.Services.ILabelsService" />
        </member>
        <member name="M:Todoist.Net.Services.LabelsService.GetAsync">
            <summary>
            Gets all labels.
            </summary>
            <returns>The labels.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.LabelsService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a label info by ID.
            </summary>
            <param name="id">The ID of the label.</param>
            <returns>
            The label info.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.NotesCommandService">
            <summary>
            Contains operations for notes management which can be executes in a transaction.
            </summary>
            <seealso cref="T:Todoist.Net.Services.CommandServiceBase" />
            <seealso cref="T:Todoist.Net.Services.INotesCommandServices" />
        </member>
        <member name="M:Todoist.Net.Services.NotesCommandService.AddToItemAsync(Todoist.Net.Models.Note,Todoist.Net.Models.ComplexId)">
            <summary>
            Adds the note asynchronous.
            </summary>
            <param name="note">The note.</param>
            <param name="itemId">The item identifier.</param>
            <returns>
            The note ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.NotesCommandService.AddToProjectAsync(Todoist.Net.Models.Note,Todoist.Net.Models.ComplexId)">
            <summary>
            Adds the note asynchronous.
            </summary>
            <param name="note">The note.</param>
            <param name="projectId">The project ID.</param>
            <returns>
            The note ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.NotesCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes the note asynchronous.
            </summary>
            <param name="id">The ID of the note.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.NotesCommandService.UpdateAsync(Todoist.Net.Models.Note)">
            <summary>
            Updates the note asynchronous.
            </summary>
            <param name="note">The note.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.NotesService">
            <summary>
            Contains operations for notes management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.NotesCommandService" />
            <seealso cref="T:Todoist.Net.Services.INotesServices" />
        </member>
        <member name="M:Todoist.Net.Services.NotesService.GetAsync">
            <summary>
            Gets all notes.
            </summary>
            <returns>The notes.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.NotesService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a note by ID.
            </summary>
            <param name="id">The ID of the note.</param>
            <returns>
            The note.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.NotificationsCommandService.MarkAllReadAsync">
            <summary>
            Marks the last read live notification.
            </summary>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.NotificationsCommandService.MarkLastReadAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Marks the last read live notification.
            </summary>
            <param name="id">The ID of the last read notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.NotificationsService.GetAsync">
            <summary>
            Gets all live notifications.
            </summary>
            <returns>List of the notifications.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ProjectsCommandService">
            <summary>
            Contains methods for projects management which can be executed in a transaction.
            </summary>
            <seealso cref="T:Todoist.Net.Services.CommandServiceBase" />
            <seealso cref="T:Todoist.Net.Services.IProjectCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.ProjectsCommandService.AddAsync(Todoist.Net.Models.Project)">
            <summary>
            Adds a new project.
            </summary>
            <param name="project">The project.</param>
            <returns>The ID of the project.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="project"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsCommandService.ArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Archive a project and its descendants.
            </summary>
            <param name="id">The project ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>Only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Delete an existing project and all its descendants.
            </summary>
            <param name="id">The project ID.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsCommandService.UnarchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Unarchive a project.
            No ancestors will be unarchived along with the unarchived project.
            Instead, the project is unarchived alone, loses any parent relationship (becomes a root project), and is placed at the end of the list of other root projects.
            </summary>
            <param name="id">The project ID.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <remarks>Only available for Todoist Premium users.</remarks>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsCommandService.UpdateAsync(Todoist.Net.Models.Project)">
            <summary>
            Updates the project.
            </summary>
            <param name="project">The project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="project"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsCommandService.MoveAsync(Todoist.Net.Models.MoveArgument)">
            <summary>
            Updates parent project relationships of the project asynchronous.
            </summary>
            <param name="moveArgument">The move entry.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="moveArgument" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsCommandService.ReorderAsync(Todoist.Net.Models.ReorderEntry[])">
            <summary>
            Update the orders and indents of multiple projects at once asynchronous.
            </summary>
            <param name="reorderEntries">The reorder entries.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reorderEntries" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be an empty collection.</exception>
        </member>
        <member name="T:Todoist.Net.Services.ProjectsService">
            <summary>
            Contains methods for projects management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.ProjectsCommandService" />
            <seealso cref="T:Todoist.Net.Services.IProjectsService" />
        </member>
        <member name="M:Todoist.Net.Services.ProjectsService.GetArchivedAsync">
            <summary>
            Gets archived projects.
            </summary>
            <returns>
            The archived projects.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsService.GetAsync">
            <summary>
            Gets all projects.
            </summary>
            <returns>The projects.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a project by ID.
            </summary>
            <param name="id">The ID of the project.</param>
            <returns>
            The project.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.ProjectsService.GetDataAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a project’s uncompleted items.
            </summary>
            <param name="id">The ID of the project.</param>
            <returns>
            The project data.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.RemindersCommandService.AddAsync(Todoist.Net.Models.Reminder)">
            <summary>
            Adds a reminder asynchronous.
            </summary>
            <param name="reminder">The reminder.</param>
            <returns>
            The reminder ID.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reminder" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.RemindersCommandService.ClearLocationsAsync">
            <summary>
            Clears the locations list, which is used for the location reminders.
            </summary>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.RemindersCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Deletes an existing reminder asynchronous.
            </summary>
            <param name="id">The ID of the reminder.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.RemindersCommandService.UpdateAsync(Todoist.Net.Models.Reminder)">
            <summary>
            Updates a reminder asynchronous.
            </summary>
            <param name="reminder">The reminder.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reminder"/> is <see langword="null"/></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.RemindersService">
            <summary>
            Contains operations for reminders management.
            </summary>
        </member>
        <member name="M:Todoist.Net.Services.RemindersService.GetAsync">
            <summary>
            Gets all reminders.
            </summary>
            <returns>The filters.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.RemindersService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a reminder info by ID.
            </summary>
            <param name="id">The ID of the reminder.</param>
            <returns>
            The reminder info.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.SectionsCommandService">
            <summary>
            Contains methods for sections management which can be executed in a transaction.
            </summary>
            <seealso cref="T:Todoist.Net.Services.CommandServiceBase" />
            <seealso cref="T:Todoist.Net.Services.ISectionsCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.SectionsCommandService.AddAsync(Todoist.Net.Models.Section)">
            <summary>
            Add a new section to a project.
            </summary>
            <param name="section">The section.</param>
            <returns>The ID of the section.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="section" /> is <see langword="null" /></exception>
        </member>
        <member name="M:Todoist.Net.Services.SectionsCommandService.ArchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Archive a section and all its descendants tasks.
            </summary>
            <param name="id">The section ID.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SectionsCommandService.DeleteAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Delete a section and all its descendants items.
            </summary>
            <param name="id">The section ID.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SectionsCommandService.MoveAsync(Todoist.Net.Models.SectionMoveArgument)">
            <summary>
            Updates the section.
            </summary>
            <param name="moveArgument">The move argument.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="moveArgument" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SectionsCommandService.ReorderAsync(Todoist.Net.Models.SectionOrderEntry[])">
            <summary>
            Updates the section.
            </summary>
            <param name="orderEntries">The order entries.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderEntries" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SectionsCommandService.UnarchiveAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Unarchive a section.
            </summary>
            <param name="id">The section ID.</param>
            <returns> Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation. </returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SectionsCommandService.UpdateAsync(Todoist.Net.Models.Section)">
            <summary>
            Updates the section.
            </summary>
            <param name="section">The section.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="section" /> is <see langword="null" /></exception>
        </member>
        <member name="T:Todoist.Net.Services.SectionService">
            <summary>
            Contains methods for sections management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.ISectionService" />
            <seealso cref="T:Todoist.Net.Services.SectionsCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.SectionService.GetAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a section by ID.
            </summary>
            <param name="id">The ID of the section.</param>
            <returns>
            The section.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.SharingCommandService">
            <summary>
            Contains methods for sharing management which can be executed in a transaction.
            </summary>
            <seealso cref="T:Todoist.Net.Services.CommandServiceBase" />
        </member>
        <member name="M:Todoist.Net.Services.SharingCommandService.AcceptInvitationAsync(System.Int64,System.String)">
            <summary>
            Accepts an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <param name="invitationSecret">The secret fetched from the live notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SharingCommandService.DeleteCollaboratorAsync(Todoist.Net.Models.ComplexId,System.String)">
            <summary>
            Deletes a person from a shared project.
            </summary>
            <param name="id">The project ID to be affected.</param>
            <param name="email">The user email with whom to share the project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SharingCommandService.DeleteInvitationAsync(System.Int64)">
            <summary>
            Deletes an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SharingCommandService.RejectInvitationAsync(System.Int64,System.String)">
            <summary>
            Rejects an invitation.
            </summary>
            <param name="id">The invitation id.</param>
            <param name="invitationSecret">The secret fetched from the live notification.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="M:Todoist.Net.Services.SharingCommandService.ShareProjectAsync(Todoist.Net.Models.ComplexId,System.String)">
            <summary>
            Shares a project.
            </summary>
            <param name="id">The project ID to be shared.</param>
            <param name="email">The user email with whom to share the project.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
        </member>
        <member name="T:Todoist.Net.Services.SharingService">
            <summary>
            Contains methods for sharing management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.SharingCommandService" />
        </member>
        <member name="M:Todoist.Net.Services.TemplateService.ExportAsFileAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a template for the project as a file asynchronous.
            </summary>
            <param name="projectId">The project identifier.</param>
            <returns>The CSV template is returned.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.TemplateService.ExportAsShareableUrlAsync(Todoist.Net.Models.ComplexId)">
            <summary>
            Gets a template for the project as a shareable URL asynchronous.
            </summary>
            <param name="projectId">The project identifier.</param>
            <returns>The file object of the template.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.TemplateService.ImportIntoProjectAsync(Todoist.Net.Models.ComplexId,System.Byte[])">
            <summary>
            Imports a template into a project asynchronous.
            </summary>
            <param name="projectId">The project identifier.</param>
            <param name="fileContent">Content of the template.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.Transaction">
            <summary>
            Represents a Transaction
            </summary>
            <seealso cref="T:Todoist.Net.Services.ITransaction" />
        </member>
        <member name="M:Todoist.Net.Services.Transaction.#ctor(Todoist.Net.IAdvancedTodoistClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.Services.Transaction"/> class.
            </summary>
            <param name="todoistClient">The client.</param>
        </member>
        <member name="M:Todoist.Net.Services.Transaction.CommitAsync">
            <summary>
            Commits the transaction asynchronous.
            </summary>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="T:Todoist.Net.Services.UploadService">
            <summary>
            Contains operations for file attachments management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.IUploadService" />
        </member>
        <member name="M:Todoist.Net.Services.UploadService.DeleteAsync(System.String)">
            <summary>
            Deletes a file asynchronous.
            </summary>
            <param name="fileUrl">The file URL.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.UploadService.GetAsync">
            <summary>
            Gets all uploads.
            </summary>
            <returns>
            The uploads.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.UploadService.UploadAsync(System.String,System.Byte[])">
            <summary>
            Uploads a file asynchronous.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileContent">Content of the file.</param>
            <returns>The uploaded file.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.UsersCommandService.UpdateAsync(Todoist.Net.Models.User)">
            <summary>
            Gets the current user info.
            </summary>
            <param name="user">The user.</param>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="user" /> is <see langword="null" /></exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.UsersCommandService.UpdateKarmaGoalsAsync(Todoist.Net.Models.KarmaGoals)">
            <summary>
            Gets the current user info.
            </summary>
            <param name="karmaGoals">The karma goals.</param>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="karmaGoals" /> is <see langword="null" /></exception>
        </member>
        <member name="T:Todoist.Net.Services.UsersService">
            <summary>
            Contains operations for users management.
            </summary>
            <seealso cref="T:Todoist.Net.Services.LabelsCommandService" />
            <seealso cref="T:Todoist.Net.Services.ILabelsService" />
        </member>
        <member name="M:Todoist.Net.Services.UsersService.DeleteAsync(System.String,System.String)">
            <summary>
            Deletes the current user.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="reason">The reason.</param>
            <returns>The label info.</returns>
            <exception cref="T:System.ArgumentNullException">API exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.UsersService.GetCurrentAsync">
            <summary>
            Gets the current user info.
            </summary>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.Services.UsersService.UpdateNotificationSettingsAsync(Todoist.Net.Models.NotificationType,Todoist.Net.Models.NotificationService,System.Boolean)">
            <summary>
            Gets the current user info.
            </summary>
            <param name="notificationType">Type of the notification.</param>
            <param name="service">The service.</param>
            <param name="notify">The notify.</param>
            <returns>The current user info.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="notificationType" /> or <paramref name="service" /> is <see langword="null" /></exception>
        </member>
        <member name="T:Todoist.Net.TodoistClient">
            <summary>
            A Todoist client.
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:Todoist.Net.IAdvancedTodoistClient" />
        </member>
        <member name="M:Todoist.Net.TodoistClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.TodoistClient" /> class.
            </summary>
            <param name="token">The token.</param>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty - token</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.TodoistClient" /> class.
            </summary>
            <param name="token">The token.</param>
            <param name="proxy">The proxy.</param>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty - token</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.#ctor(System.String,Todoist.Net.ITodoistRestClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.TodoistClient" /> class.
            </summary>
            <param name="token">The token.</param>
            <param name="restClient">The rest client.</param>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty - token</exception>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Activity">
            <summary>
            Gets the activity service.
            </summary>
            <value>The activity service.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Backups">
            <summary>
            Gets the backups.
            </summary>
            <value>The backups.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Emails">
            <summary>
            Gets the email.
            </summary>
            <value>The email.</value>
            <remarks>Filters are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
            <remarks>Filters are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Items">
            <summary>
            Gets the items service.
            </summary>
            <value>The items service.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Labels">
            <summary>
            Gets the labels.
            </summary>
            <value>The labels.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Notes">
            <summary>
            Gets the notes service.
            </summary>
            <value>The notes service.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Notifications">
            <summary>
            Gets the notifications service.
            </summary>
            <value>The notifications service.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Projects">
            <summary>
            Gets the projects service.
            </summary>
            <value>The projects service.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Reminders">
            <summary>
            Gets the reminders.
            </summary>
            <value>The reminders.</value>
            <remarks>Reminders are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Sections">
            <summary>
            Gets the sections service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Sharing">
            <summary>
            Gets the sharing.
            </summary>
            <value>
            The sharing.
            </value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Templates">
            <summary>
            Gets the templates.
            </summary>
            <value>The templates.</value>
            <remarks>Templates are only available for Todoist Premium users.</remarks>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Uploads">
            <summary>
            Gets the uploads service.
            </summary>
            <value>The uploads service.</value>
        </member>
        <member name="P:Todoist.Net.TodoistClient.Users">
            <summary>
            Gets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="M:Todoist.Net.TodoistClient.CreateTransaction">
            <summary>
            Creates the transaction.
            </summary>
            <returns>The transaction.</returns>
        </member>
        <member name="M:Todoist.Net.TodoistClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Todoist.Net.TodoistClient.GetResourcesAsync(Todoist.Net.Models.ResourceType[])">
            <summary>
            Gets the resources asynchronous.
            </summary>
            <param name="resourceTypes">The resource types.</param>
            <returns>
            All resources.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceTypes" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.PostFormAsync``1(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Net.Http.ByteArrayContent})">
            <summary>
            Posts the asynchronous and returns a raw content.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <param name="files">The files.</param>
            <returns>
            The result.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.Todoist#Net#IAdvancedTodoistClient#ExecuteCommandsAsync(Todoist.Net.Models.Command[])">
            <summary>
            Executes the commands asynchronous.
            </summary>
            <param name="commands">The commands.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Value cannot be null - commands.</exception>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
            <exception cref="T:System.ArgumentException">Value cannot be an empty collection.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.Todoist#Net#IAdvancedTodoistClient#PostAsync``1(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts the request asynchronous.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The result.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.Todoist#Net#IAdvancedTodoistClient#PostRawAsync(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts the asynchronous and returns a raw content.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The result.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.Todoist#Net#IAdvancedTodoistClient#ProcessPostAsync``1(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Processes the request asynchronous.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The result of the operation.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.ProcessFormAsync``1(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Net.Http.ByteArrayContent})">
            <summary>
            Processes the form asynchronous.
            </summary>
            <typeparam name="T">The type of the response.</typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <param name="files">The files.</param>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <returns>The response.</returns>
        </member>
        <member name="M:Todoist.Net.TodoistClient.ProcessRawPostAsync(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Processes the request asynchronous without deserialization.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>The response content.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.ProcessSyncAsync``1(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Processes the synchronize request asynchronous.
            </summary>
            <typeparam name="T">Type of the response.</typeparam>
            <param name="parameters">The parameters.</param>
            <returns>The response.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistClient.ReadResponseAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            Reads the response asynchronous.
            </summary>
            <param name="response">The response.</param>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <returns>The response content.</returns>
        </member>
        <member name="M:Todoist.Net.TodoistClient.ThrowIfErrors(Todoist.Net.Models.SyncResponse)">
            <summary>
            Throws if there are errors in the response.
            </summary>
            <param name="syncResponse">The synchronize response.</param>
            <exception cref="T:System.AggregateException">Command execution exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistRestClient.PostAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts the asynchronous.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The response.
            </returns>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty - resource</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters" /> is <see langword="null" /></exception>
        </member>
        <member name="M:Todoist.Net.TodoistRestClient.PostFormAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Net.Http.ByteArrayContent})">
            <summary>
            Posts the form asynchronous.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <param name="files">The files.</param>
            <returns>The response.</returns>
        </member>
        <member name="T:Todoist.Net.TodoistTokenlessClient">
            <summary>
            A Todoist client without an access token.
            </summary>
            <seealso cref="T:Todoist.Net.ITodoistTokenlessClient" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.TodoistTokenlessClient" /> class.
            </summary>
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.#ctor(System.Net.IWebProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.TodoistTokenlessClient" /> class.
            </summary>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.#ctor(Todoist.Net.ITodoistRestClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Todoist.Net.TodoistTokenlessClient" /> class.
            </summary>
            <param name="restClient">The rest client.</param>
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.LoginAsync(System.String,System.String)">
            <summary>
            Logins user and returns a new instance of Todoist client.
            </summary>
            <param name="email">The email.</param>
            <param name="password">The password.</param>
            <returns>
            A new instance of Todoist client.
            </returns>
            <exception cref="T:System.ArgumentException">
            Value cannot be null or empty. - email
            or
            Value cannot be null or empty. - password
            </exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:Todoist.Net.Exceptions.TodoistException">Unable to get token.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.LoginWithGoogleAsync(System.String,System.String)">
            <summary>
            Logins user and returns a new instance of Todoist client.
            </summary>
            <param name="email">The email.</param>
            <param name="oauthToken">The oauth token.</param>
            <returns>
            A new instance of Todoist client.
            </returns>
            <exception cref="T:System.ArgumentException">
            Value cannot be null or empty. - email
            or
            Value cannot be null or empty. - oauthToken
            </exception>
            <exception cref="T:Todoist.Net.Exceptions.TodoistException">API exception.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.RegisterUserAsync(Todoist.Net.Models.UserBase)">
            <summary>
            Registers a new user.
            </summary>
            <param name="user">The user.</param>
            <returns>
            The user info.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="user" /> is <see langword="null" /></exception>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
        </member>
        <member name="M:Todoist.Net.TodoistTokenlessClient.LoginWithCredentialsAsync(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Logins with credentials and returns a new instance of Todoist client.
            </summary>
            <param name="resource">The resource.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            A new instance of Todoist client.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">API exception.</exception>
            <exception cref="T:Todoist.Net.Exceptions.TodoistException">Unable to get token.</exception>
        </member>
    </members>
</doc>
